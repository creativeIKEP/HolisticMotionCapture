// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/modules/objectron/calculators/camera_parameters.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/modules/objectron/calculators/camera_parameters.proto</summary>
  public static partial class CameraParametersReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/modules/objectron/calculators/camera_parameters.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CameraParametersReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj9tZWRpYXBpcGUvbW9kdWxlcy9vYmplY3Ryb24vY2FsY3VsYXRvcnMvY2Ft",
            "ZXJhX3BhcmFtZXRlcnMucHJvdG8SCW1lZGlhcGlwZSLnAwoVQ2FtZXJhUGFy",
            "YW1ldGVyc1Byb3RvEiAKE2hlaWdodF9hYm92ZV9ncm91bmQYASABKAI6AzEw",
            "MBIeCg5wb3J0cmFpdF93aWR0aBgCIAEoAjoGMS4wMTAzEh8KD3BvcnRyYWl0",
            "X2hlaWdodBgDIAEoAjoGMS4zNDM1EmIKEWltYWdlX29yaWVudGF0aW9uGAQg",
            "ASgOMjEubWVkaWFwaXBlLkNhbWVyYVBhcmFtZXRlcnNQcm90by5JbWFnZU9y",
            "aWVudGF0aW9uOhRQT1JUUkFJVF9PUklFTlRBVElPThJWCg9wcm9qZWN0aW9u",
            "X21vZGUYBSABKA4yLy5tZWRpYXBpcGUuQ2FtZXJhUGFyYW1ldGVyc1Byb3Rv",
            "LlByb2plY3Rpb25Nb2RlOgxHUk9VTkRfUExBTkUSJQoYcHJvamVjdGlvbl9z",
            "cGhlcmVfcmFkaXVzGAYgASgCOgMxMDAiRwoQSW1hZ2VPcmllbnRhdGlvbhIY",
            "ChRQT1JUUkFJVF9PUklFTlRBVElPThAAEhkKFUxBTkRTQ0FQRV9PUklFTlRB",
            "VElPThABIj8KDlByb2plY3Rpb25Nb2RlEg8KC1VOU1BFQ0lGSUVEEAASEAoM",
            "R1JPVU5EX1BMQU5FEAESCgoGU1BIRVJFEAI="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.CameraParametersProto), global::Mediapipe.CameraParametersProto.Parser, new[]{ "HeightAboveGround", "PortraitWidth", "PortraitHeight", "ImageOrientation", "ProjectionMode", "ProjectionSphereRadius" }, null, new[]{ typeof(global::Mediapipe.CameraParametersProto.Types.ImageOrientation), typeof(global::Mediapipe.CameraParametersProto.Types.ProjectionMode) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CameraParametersProto : pb::IMessage<CameraParametersProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CameraParametersProto> _parser = new pb::MessageParser<CameraParametersProto>(() => new CameraParametersProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CameraParametersProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.CameraParametersReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraParametersProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraParametersProto(CameraParametersProto other) : this() {
      _hasBits0 = other._hasBits0;
      heightAboveGround_ = other.heightAboveGround_;
      portraitWidth_ = other.portraitWidth_;
      portraitHeight_ = other.portraitHeight_;
      imageOrientation_ = other.imageOrientation_;
      projectionMode_ = other.projectionMode_;
      projectionSphereRadius_ = other.projectionSphereRadius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraParametersProto Clone() {
      return new CameraParametersProto(this);
    }

    /// <summary>Field number for the "height_above_ground" field.</summary>
    public const int HeightAboveGroundFieldNumber = 1;
    private readonly static float HeightAboveGroundDefaultValue = 100F;

    private float heightAboveGround_;
    /// <summary>
    /// This number is non-negative, it represents camera height above ground
    /// normalized by focal length.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HeightAboveGround {
      get { if ((_hasBits0 & 1) != 0) { return heightAboveGround_; } else { return HeightAboveGroundDefaultValue; } }
      set {
        _hasBits0 |= 1;
        heightAboveGround_ = value;
      }
    }
    /// <summary>Gets whether the "height_above_ground" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHeightAboveGround {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "height_above_ground" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHeightAboveGround() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "portrait_width" field.</summary>
    public const int PortraitWidthFieldNumber = 2;
    private readonly static float PortraitWidthDefaultValue = 1.0103F;

    private float portraitWidth_;
    /// <summary>
    /// Width of image in portrait orientation normalized by focal length
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PortraitWidth {
      get { if ((_hasBits0 & 2) != 0) { return portraitWidth_; } else { return PortraitWidthDefaultValue; } }
      set {
        _hasBits0 |= 2;
        portraitWidth_ = value;
      }
    }
    /// <summary>Gets whether the "portrait_width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPortraitWidth {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "portrait_width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPortraitWidth() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "portrait_height" field.</summary>
    public const int PortraitHeightFieldNumber = 3;
    private readonly static float PortraitHeightDefaultValue = 1.3435F;

    private float portraitHeight_;
    /// <summary>
    /// Height of image in portrait orientation normalized by focal length
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PortraitHeight {
      get { if ((_hasBits0 & 4) != 0) { return portraitHeight_; } else { return PortraitHeightDefaultValue; } }
      set {
        _hasBits0 |= 4;
        portraitHeight_ = value;
      }
    }
    /// <summary>Gets whether the "portrait_height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPortraitHeight {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "portrait_height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPortraitHeight() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "image_orientation" field.</summary>
    public const int ImageOrientationFieldNumber = 4;
    private readonly static global::Mediapipe.CameraParametersProto.Types.ImageOrientation ImageOrientationDefaultValue = global::Mediapipe.CameraParametersProto.Types.ImageOrientation.PortraitOrientation;

    private global::Mediapipe.CameraParametersProto.Types.ImageOrientation imageOrientation_;
    /// <summary>
    /// The input image orientation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.CameraParametersProto.Types.ImageOrientation ImageOrientation {
      get { if ((_hasBits0 & 8) != 0) { return imageOrientation_; } else { return ImageOrientationDefaultValue; } }
      set {
        _hasBits0 |= 8;
        imageOrientation_ = value;
      }
    }
    /// <summary>Gets whether the "image_orientation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasImageOrientation {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "image_orientation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearImageOrientation() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "projection_mode" field.</summary>
    public const int ProjectionModeFieldNumber = 5;
    private readonly static global::Mediapipe.CameraParametersProto.Types.ProjectionMode ProjectionModeDefaultValue = global::Mediapipe.CameraParametersProto.Types.ProjectionMode.GroundPlane;

    private global::Mediapipe.CameraParametersProto.Types.ProjectionMode projectionMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.CameraParametersProto.Types.ProjectionMode ProjectionMode {
      get { if ((_hasBits0 & 16) != 0) { return projectionMode_; } else { return ProjectionModeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        projectionMode_ = value;
      }
    }
    /// <summary>Gets whether the "projection_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProjectionMode {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "projection_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProjectionMode() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "projection_sphere_radius" field.</summary>
    public const int ProjectionSphereRadiusFieldNumber = 6;
    private readonly static float ProjectionSphereRadiusDefaultValue = 100F;

    private float projectionSphereRadius_;
    /// <summary>
    /// Radius of sphere when using the SPHERE projection mode above.
    /// The value is normalized by focal length.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ProjectionSphereRadius {
      get { if ((_hasBits0 & 32) != 0) { return projectionSphereRadius_; } else { return ProjectionSphereRadiusDefaultValue; } }
      set {
        _hasBits0 |= 32;
        projectionSphereRadius_ = value;
      }
    }
    /// <summary>Gets whether the "projection_sphere_radius" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProjectionSphereRadius {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "projection_sphere_radius" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProjectionSphereRadius() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CameraParametersProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CameraParametersProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeightAboveGround, other.HeightAboveGround)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PortraitWidth, other.PortraitWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PortraitHeight, other.PortraitHeight)) return false;
      if (ImageOrientation != other.ImageOrientation) return false;
      if (ProjectionMode != other.ProjectionMode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ProjectionSphereRadius, other.ProjectionSphereRadius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeightAboveGround) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeightAboveGround);
      if (HasPortraitWidth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PortraitWidth);
      if (HasPortraitHeight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PortraitHeight);
      if (HasImageOrientation) hash ^= ImageOrientation.GetHashCode();
      if (HasProjectionMode) hash ^= ProjectionMode.GetHashCode();
      if (HasProjectionSphereRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ProjectionSphereRadius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHeightAboveGround) {
        output.WriteRawTag(13);
        output.WriteFloat(HeightAboveGround);
      }
      if (HasPortraitWidth) {
        output.WriteRawTag(21);
        output.WriteFloat(PortraitWidth);
      }
      if (HasPortraitHeight) {
        output.WriteRawTag(29);
        output.WriteFloat(PortraitHeight);
      }
      if (HasImageOrientation) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ImageOrientation);
      }
      if (HasProjectionMode) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ProjectionMode);
      }
      if (HasProjectionSphereRadius) {
        output.WriteRawTag(53);
        output.WriteFloat(ProjectionSphereRadius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHeightAboveGround) {
        output.WriteRawTag(13);
        output.WriteFloat(HeightAboveGround);
      }
      if (HasPortraitWidth) {
        output.WriteRawTag(21);
        output.WriteFloat(PortraitWidth);
      }
      if (HasPortraitHeight) {
        output.WriteRawTag(29);
        output.WriteFloat(PortraitHeight);
      }
      if (HasImageOrientation) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ImageOrientation);
      }
      if (HasProjectionMode) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ProjectionMode);
      }
      if (HasProjectionSphereRadius) {
        output.WriteRawTag(53);
        output.WriteFloat(ProjectionSphereRadius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasHeightAboveGround) {
        size += 1 + 4;
      }
      if (HasPortraitWidth) {
        size += 1 + 4;
      }
      if (HasPortraitHeight) {
        size += 1 + 4;
      }
      if (HasImageOrientation) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImageOrientation);
      }
      if (HasProjectionMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProjectionMode);
      }
      if (HasProjectionSphereRadius) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CameraParametersProto other) {
      if (other == null) {
        return;
      }
      if (other.HasHeightAboveGround) {
        HeightAboveGround = other.HeightAboveGround;
      }
      if (other.HasPortraitWidth) {
        PortraitWidth = other.PortraitWidth;
      }
      if (other.HasPortraitHeight) {
        PortraitHeight = other.PortraitHeight;
      }
      if (other.HasImageOrientation) {
        ImageOrientation = other.ImageOrientation;
      }
      if (other.HasProjectionMode) {
        ProjectionMode = other.ProjectionMode;
      }
      if (other.HasProjectionSphereRadius) {
        ProjectionSphereRadius = other.ProjectionSphereRadius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            HeightAboveGround = input.ReadFloat();
            break;
          }
          case 21: {
            PortraitWidth = input.ReadFloat();
            break;
          }
          case 29: {
            PortraitHeight = input.ReadFloat();
            break;
          }
          case 32: {
            ImageOrientation = (global::Mediapipe.CameraParametersProto.Types.ImageOrientation) input.ReadEnum();
            break;
          }
          case 40: {
            ProjectionMode = (global::Mediapipe.CameraParametersProto.Types.ProjectionMode) input.ReadEnum();
            break;
          }
          case 53: {
            ProjectionSphereRadius = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            HeightAboveGround = input.ReadFloat();
            break;
          }
          case 21: {
            PortraitWidth = input.ReadFloat();
            break;
          }
          case 29: {
            PortraitHeight = input.ReadFloat();
            break;
          }
          case 32: {
            ImageOrientation = (global::Mediapipe.CameraParametersProto.Types.ImageOrientation) input.ReadEnum();
            break;
          }
          case 40: {
            ProjectionMode = (global::Mediapipe.CameraParametersProto.Types.ProjectionMode) input.ReadEnum();
            break;
          }
          case 53: {
            ProjectionSphereRadius = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CameraParametersProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum ImageOrientation {
        [pbr::OriginalName("PORTRAIT_ORIENTATION")] PortraitOrientation = 0,
        [pbr::OriginalName("LANDSCAPE_ORIENTATION")] LandscapeOrientation = 1,
      }

      /// <summary>
      /// This defines the projection method from 2D screen to 3D.
      /// </summary>
      public enum ProjectionMode {
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Projects 2D point to ground plane (horizontal plane).
        /// </summary>
        [pbr::OriginalName("GROUND_PLANE")] GroundPlane = 1,
        /// <summary>
        /// Projects 2D point to sphere.
        /// </summary>
        [pbr::OriginalName("SPHERE")] Sphere = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
