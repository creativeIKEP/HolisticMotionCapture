// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/modules/objectron/calculators/filter_detection_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/modules/objectron/calculators/filter_detection_calculator.proto</summary>
  public static partial class FilterDetectionCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/modules/objectron/calculators/filter_detection_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FilterDetectionCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkltZWRpYXBpcGUvbW9kdWxlcy9vYmplY3Ryb24vY2FsY3VsYXRvcnMvZmls",
            "dGVyX2RldGVjdGlvbl9jYWxjdWxhdG9yLnByb3RvEgltZWRpYXBpcGUaJG1l",
            "ZGlhcGlwZS9mcmFtZXdvcmsvY2FsY3VsYXRvci5wcm90byLLAgogRmlsdGVy",
            "RGV0ZWN0aW9uQ2FsY3VsYXRvck9wdGlvbnMSEQoJbWluX3Njb3JlGAEgASgC",
            "EhEKCW1heF9zY29yZRgCIAEoAhIjChRmYWlsX29uX2VtcHR5X2xhYmVscxgD",
            "IAEoCDoFZmFsc2USOgorZW1wdHlfYWxsb3dlZF9sYWJlbHNfbWVhbnNfYWxs",
            "b3dfZXZlcnl0aGluZxgGIAEoCDoFZmFsc2USIAoUdXNlX2RldGVjdGlvbl92",
            "ZWN0b3IYBCABKAhCAhgBEiIKFnVzZV9hbGxvd2VkX2xhYmVsc19jc3YYBSAB",
            "KAhCAhgBMloKA2V4dBIcLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9ucxiL",
            "wPahASABKAsyKy5tZWRpYXBpcGUuRmlsdGVyRGV0ZWN0aW9uQ2FsY3VsYXRv",
            "ck9wdGlvbnM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.FilterDetectionCalculatorOptions), global::Mediapipe.FilterDetectionCalculatorOptions.Parser, new[]{ "MinScore", "MaxScore", "FailOnEmptyLabels", "EmptyAllowedLabelsMeansAllowEverything", "UseDetectionVector", "UseAllowedLabelsCsv" }, null, null, new pb::Extension[] { global::Mediapipe.FilterDetectionCalculatorOptions.Extensions.Ext }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FilterDetectionCalculatorOptions : pb::IMessage<FilterDetectionCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FilterDetectionCalculatorOptions> _parser = new pb::MessageParser<FilterDetectionCalculatorOptions>(() => new FilterDetectionCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FilterDetectionCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.FilterDetectionCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FilterDetectionCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FilterDetectionCalculatorOptions(FilterDetectionCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      minScore_ = other.minScore_;
      maxScore_ = other.maxScore_;
      failOnEmptyLabels_ = other.failOnEmptyLabels_;
      emptyAllowedLabelsMeansAllowEverything_ = other.emptyAllowedLabelsMeansAllowEverything_;
      useDetectionVector_ = other.useDetectionVector_;
      useAllowedLabelsCsv_ = other.useAllowedLabelsCsv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FilterDetectionCalculatorOptions Clone() {
      return new FilterDetectionCalculatorOptions(this);
    }

    /// <summary>Field number for the "min_score" field.</summary>
    public const int MinScoreFieldNumber = 1;
    private readonly static float MinScoreDefaultValue = 0F;

    private float minScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinScore {
      get { if ((_hasBits0 & 1) != 0) { return minScore_; } else { return MinScoreDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minScore_ = value;
      }
    }
    /// <summary>Gets whether the "min_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinScore {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinScore() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_score" field.</summary>
    public const int MaxScoreFieldNumber = 2;
    private readonly static float MaxScoreDefaultValue = 0F;

    private float maxScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxScore {
      get { if ((_hasBits0 & 2) != 0) { return maxScore_; } else { return MaxScoreDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxScore_ = value;
      }
    }
    /// <summary>Gets whether the "max_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxScore {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxScore() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "fail_on_empty_labels" field.</summary>
    public const int FailOnEmptyLabelsFieldNumber = 3;
    private readonly static bool FailOnEmptyLabelsDefaultValue = false;

    private bool failOnEmptyLabels_;
    /// <summary>
    /// Setting fail_on_empty_labels to true will cause the calculator to return a
    /// failure status on Open() if an empty list is provided on the external
    /// input, immediately terminating the graph run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FailOnEmptyLabels {
      get { if ((_hasBits0 & 4) != 0) { return failOnEmptyLabels_; } else { return FailOnEmptyLabelsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        failOnEmptyLabels_ = value;
      }
    }
    /// <summary>Gets whether the "fail_on_empty_labels" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFailOnEmptyLabels {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "fail_on_empty_labels" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFailOnEmptyLabels() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "empty_allowed_labels_means_allow_everything" field.</summary>
    public const int EmptyAllowedLabelsMeansAllowEverythingFieldNumber = 6;
    private readonly static bool EmptyAllowedLabelsMeansAllowEverythingDefaultValue = false;

    private bool emptyAllowedLabelsMeansAllowEverything_;
    /// <summary>
    /// If fail_on_empty_labels is set to false setting
    /// empty_allowed_labels_means_allow_everything to
    /// false will cause the calculator to close output stream and ignore remaining
    /// inputs if an empty list is provided. If
    /// empty_allowed_labels_means_allow_everything is set to true this will force
    /// calculator to pass all labels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EmptyAllowedLabelsMeansAllowEverything {
      get { if ((_hasBits0 & 32) != 0) { return emptyAllowedLabelsMeansAllowEverything_; } else { return EmptyAllowedLabelsMeansAllowEverythingDefaultValue; } }
      set {
        _hasBits0 |= 32;
        emptyAllowedLabelsMeansAllowEverything_ = value;
      }
    }
    /// <summary>Gets whether the "empty_allowed_labels_means_allow_everything" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEmptyAllowedLabelsMeansAllowEverything {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "empty_allowed_labels_means_allow_everything" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEmptyAllowedLabelsMeansAllowEverything() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "use_detection_vector" field.</summary>
    public const int UseDetectionVectorFieldNumber = 4;
    private readonly static bool UseDetectionVectorDefaultValue = false;

    private bool useDetectionVector_;
    /// <summary>
    /// Determines whether the input format is a vector&lt;Detection> (use-case object
    /// detectors) or Detection (use-case classifiers).
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseDetectionVector {
      get { if ((_hasBits0 & 8) != 0) { return useDetectionVector_; } else { return UseDetectionVectorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        useDetectionVector_ = value;
      }
    }
    /// <summary>Gets whether the "use_detection_vector" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseDetectionVector {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "use_detection_vector" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseDetectionVector() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "use_allowed_labels_csv" field.</summary>
    public const int UseAllowedLabelsCsvFieldNumber = 5;
    private readonly static bool UseAllowedLabelsCsvDefaultValue = false;

    private bool useAllowedLabelsCsv_;
    /// <summary>
    /// Determines whether the input side packet format is a vector of labels, or
    /// a string with comma separated labels.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseAllowedLabelsCsv {
      get { if ((_hasBits0 & 16) != 0) { return useAllowedLabelsCsv_; } else { return UseAllowedLabelsCsvDefaultValue; } }
      set {
        _hasBits0 |= 16;
        useAllowedLabelsCsv_ = value;
      }
    }
    /// <summary>Gets whether the "use_allowed_labels_csv" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseAllowedLabelsCsv {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "use_allowed_labels_csv" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseAllowedLabelsCsv() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FilterDetectionCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FilterDetectionCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinScore, other.MinScore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxScore, other.MaxScore)) return false;
      if (FailOnEmptyLabels != other.FailOnEmptyLabels) return false;
      if (EmptyAllowedLabelsMeansAllowEverything != other.EmptyAllowedLabelsMeansAllowEverything) return false;
      if (UseDetectionVector != other.UseDetectionVector) return false;
      if (UseAllowedLabelsCsv != other.UseAllowedLabelsCsv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMinScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinScore);
      if (HasMaxScore) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxScore);
      if (HasFailOnEmptyLabels) hash ^= FailOnEmptyLabels.GetHashCode();
      if (HasEmptyAllowedLabelsMeansAllowEverything) hash ^= EmptyAllowedLabelsMeansAllowEverything.GetHashCode();
      if (HasUseDetectionVector) hash ^= UseDetectionVector.GetHashCode();
      if (HasUseAllowedLabelsCsv) hash ^= UseAllowedLabelsCsv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMinScore) {
        output.WriteRawTag(13);
        output.WriteFloat(MinScore);
      }
      if (HasMaxScore) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxScore);
      }
      if (HasFailOnEmptyLabels) {
        output.WriteRawTag(24);
        output.WriteBool(FailOnEmptyLabels);
      }
      if (HasUseDetectionVector) {
        output.WriteRawTag(32);
        output.WriteBool(UseDetectionVector);
      }
      if (HasUseAllowedLabelsCsv) {
        output.WriteRawTag(40);
        output.WriteBool(UseAllowedLabelsCsv);
      }
      if (HasEmptyAllowedLabelsMeansAllowEverything) {
        output.WriteRawTag(48);
        output.WriteBool(EmptyAllowedLabelsMeansAllowEverything);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMinScore) {
        output.WriteRawTag(13);
        output.WriteFloat(MinScore);
      }
      if (HasMaxScore) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxScore);
      }
      if (HasFailOnEmptyLabels) {
        output.WriteRawTag(24);
        output.WriteBool(FailOnEmptyLabels);
      }
      if (HasUseDetectionVector) {
        output.WriteRawTag(32);
        output.WriteBool(UseDetectionVector);
      }
      if (HasUseAllowedLabelsCsv) {
        output.WriteRawTag(40);
        output.WriteBool(UseAllowedLabelsCsv);
      }
      if (HasEmptyAllowedLabelsMeansAllowEverything) {
        output.WriteRawTag(48);
        output.WriteBool(EmptyAllowedLabelsMeansAllowEverything);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMinScore) {
        size += 1 + 4;
      }
      if (HasMaxScore) {
        size += 1 + 4;
      }
      if (HasFailOnEmptyLabels) {
        size += 1 + 1;
      }
      if (HasEmptyAllowedLabelsMeansAllowEverything) {
        size += 1 + 1;
      }
      if (HasUseDetectionVector) {
        size += 1 + 1;
      }
      if (HasUseAllowedLabelsCsv) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FilterDetectionCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasMinScore) {
        MinScore = other.MinScore;
      }
      if (other.HasMaxScore) {
        MaxScore = other.MaxScore;
      }
      if (other.HasFailOnEmptyLabels) {
        FailOnEmptyLabels = other.FailOnEmptyLabels;
      }
      if (other.HasEmptyAllowedLabelsMeansAllowEverything) {
        EmptyAllowedLabelsMeansAllowEverything = other.EmptyAllowedLabelsMeansAllowEverything;
      }
      if (other.HasUseDetectionVector) {
        UseDetectionVector = other.UseDetectionVector;
      }
      if (other.HasUseAllowedLabelsCsv) {
        UseAllowedLabelsCsv = other.UseAllowedLabelsCsv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            MinScore = input.ReadFloat();
            break;
          }
          case 21: {
            MaxScore = input.ReadFloat();
            break;
          }
          case 24: {
            FailOnEmptyLabels = input.ReadBool();
            break;
          }
          case 32: {
            UseDetectionVector = input.ReadBool();
            break;
          }
          case 40: {
            UseAllowedLabelsCsv = input.ReadBool();
            break;
          }
          case 48: {
            EmptyAllowedLabelsMeansAllowEverything = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            MinScore = input.ReadFloat();
            break;
          }
          case 21: {
            MaxScore = input.ReadFloat();
            break;
          }
          case 24: {
            FailOnEmptyLabels = input.ReadBool();
            break;
          }
          case 32: {
            UseDetectionVector = input.ReadBool();
            break;
          }
          case 40: {
            UseAllowedLabelsCsv = input.ReadBool();
            break;
          }
          case 48: {
            EmptyAllowedLabelsMeansAllowEverything = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the FilterDetectionCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.FilterDetectionCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.FilterDetectionCalculatorOptions>(339582987, pb::FieldCodec.ForMessage(2716663898, global::Mediapipe.FilterDetectionCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
